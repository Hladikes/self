{"version":3,"sources":["../../../../src/utils/types.ts"],"sourcesContent":["import type { CertificateData } from './certificate_parsing/dataStructure.js';\nimport type { PassportMetadata } from './passports/passport_parsing/parsePassportData.js';\n\nexport type DocumentCategory = 'passport' | 'id_card';\n\nexport type DocumentType = 'passport' | 'id_card' | 'mock_passport' | 'mock_id_card';\nexport type PassportData = {\n  mrz: string;\n  dg1Hash?: number[];\n  dg2Hash?: number[];\n  dgPresents?: any[];\n  dsc: string;\n  eContent: number[];\n  signedAttr: number[];\n  encryptedDigest: number[];\n  passportMetadata?: PassportMetadata;\n  dsc_parsed?: CertificateData;\n  csca_parsed?: CertificateData;\n  documentType: DocumentType;\n  documentCategory: DocumentCategory;\n  mock: boolean;\n};\n\nexport type Proof = {\n  proof: {\n    a: [string, string];\n    b: [[string, string], [string, string]];\n    c: [string, string];\n  };\n  pub_signals: string[];\n};\n\n// Define the signature algorithm in \"algorithm_hashfunction_domainPapameter_keyLength\"\nexport type SignatureAlgorithm =\n  | 'rsa_sha1_65537_2048'\n  | 'rsa_sha256_65537_2048'\n  | 'rsa_sha384_65537_4096'\n  | 'rsapss_sha256_65537_2048'\n  | 'rsapss_sha256_65537_2048_64'\n  | 'rsapss_sha256_3_4096'\n  | 'rsapss_sha256_3_3072'\n  | 'rsapss_sha384_65537_3072'\n  | 'rsapss_sha384_65537_4096'\n  | 'rsapss_sha384_65537_2048'\n  | 'rsa_sha256_3_4096'\n  | 'rsa_sha512_65537_2048'\n  | 'rsa_sha1_65537_4096'\n  | 'ecdsa_sha256_secp256r1_256'\n  | 'ecdsa_sha1_secp256r1_256'\n  | 'ecdsa_sha224_secp224r1_224'\n  | 'ecdsa_sha384_secp384r1_384'\n  | 'ecdsa_sha1_brainpoolP256r1_256'\n  | 'ecdsa_sha256_brainpoolP256r1_256'\n  | 'rsa_sha256_3_2048'\n  | 'rsa_sha256_65537_3072'\n  | 'rsa_sha256_65537_4096'\n  | 'rsa_sha512_65537_4096'\n  | 'rsa_sha224_65537_2048'\n  | 'rsapss_sha256_65537_3072'\n  | 'rsapss_sha256_65537_4096'\n  | 'rsapss_sha256_3_2048'\n  | 'rsapss_sha512_3_4096'\n  | 'rsapss_sha512_3_2048'\n  | 'rsapss_sha384_3_4096'\n  | 'rsapss_sha384_3_3072'\n  | 'rsapss_sha512_65537_4096'\n  | 'rsapss_sha512_65537_2048'\n  | 'ecdsa_sha256_secp384r1_384'\n  | 'ecdsa_sha256_secp521r1_521'\n  | 'ecdsa_sha512_secp521r1_521'\n  | 'ecdsa_sha384_brainpoolP256r1_256'\n  | 'ecdsa_sha512_brainpoolP256r1_256'\n  | 'ecdsa_sha256_brainpoolP384r1_384'\n  | 'ecdsa_sha384_brainpoolP384r1_384'\n  | 'ecdsa_sha512_brainpoolP384r1_384'\n  | 'ecdsa_sha1_brainpoolP224r1_224'\n  | 'ecdsa_sha224_brainpoolP224r1_224'\n  | 'ecdsa_sha256_brainpoolP224r1_224'\n  | 'ecdsa_sha384_brainpoolP512r1_512'\n  | 'ecdsa_sha512_brainpoolP512r1_512';\n\nexport function castCSCAProof(proof: any): Proof {\n  return {\n    proof: {\n      a: proof.proof.pi_a.slice(0, 2),\n      b: [proof.proof.pi_b[0].slice(0, 2), proof.proof.pi_b[1].slice(0, 2)],\n      c: proof.proof.pi_c.slice(0, 2),\n    },\n    pub_signals: proof.pub_signals,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiFO,SAAS,cAAc,OAAmB;AAC/C,SAAO;AAAA,IACL,OAAO;AAAA,MACL,GAAG,MAAM,MAAM,KAAK,MAAM,GAAG,CAAC;AAAA,MAC9B,GAAG,CAAC,MAAM,MAAM,KAAK,CAAC,EAAE,MAAM,GAAG,CAAC,GAAG,MAAM,MAAM,KAAK,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;AAAA,MACpE,GAAG,MAAM,MAAM,KAAK,MAAM,GAAG,CAAC;AAAA,IAChC;AAAA,IACA,aAAa,MAAM;AAAA,EACrB;AACF;","names":[]}