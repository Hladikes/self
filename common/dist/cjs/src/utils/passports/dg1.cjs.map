{"version":3,"sources":["../../../../../src/utils/passports/dg1.ts","../../../../../src/utils/passports/format.ts"],"sourcesContent":["import { formatDG1Attribute, formatName } from './format.js';\nimport type { IdDocInput } from './genMockIdDoc.js';\n\nexport function genDG1(idDocInput: IdDocInput) {\n  switch (idDocInput.idType) {\n    case 'mock_passport':\n      return genDG1Passport(idDocInput);\n    case 'mock_id_card':\n      return genDG1IdCard(idDocInput);\n  }\n}\n\nfunction genDG1IdCard(idDocInput: IdDocInput) {\n  const doc_type_index = [0, 1];\n  const issuing_state_index = [2, 4];\n  const document_number_index = [5, 13];\n  const document_number_check_digit_index = [14, 14];\n  const optional_data_index = [15, 29];\n  const date_of_birth_index = [30, 35];\n  const date_of_birth_check_digit_index = [36, 36];\n  const sex_index = [37, 37];\n  const expiration_date_index = [38, 43];\n  const expiration_date_check_digit_index = [44, 44];\n  const nationality_index = [45, 47];\n  const optional_data_2_index = [48, 58];\n  const overall_check_digit_index = [59, 59];\n  const name_index = [60, 89];\n\n  const doc_type = formatDG1Attribute(doc_type_index, 'I');\n  const issuing_state = formatDG1Attribute(issuing_state_index, idDocInput.nationality);\n  const document_number = formatDG1Attribute(document_number_index, idDocInput.passportNumber);\n  const document_number_check_digit = formatDG1Attribute(document_number_check_digit_index, '0');\n  const optional_data = formatDG1Attribute(optional_data_index, '');\n  const date_of_birth = formatDG1Attribute(date_of_birth_index, idDocInput.birthDate);\n  const date_of_birth_check_digit = formatDG1Attribute(date_of_birth_check_digit_index, '0');\n  const sex = formatDG1Attribute(sex_index, idDocInput.sex);\n  const expiration_date = formatDG1Attribute(expiration_date_index, idDocInput.expiryDate);\n  const expiration_date_check_digit = formatDG1Attribute(expiration_date_check_digit_index, '0');\n  const nationality = formatDG1Attribute(nationality_index, idDocInput.nationality);\n  const optional_data_2 = formatDG1Attribute(optional_data_2_index, '');\n  const overall_check_digit = formatDG1Attribute(overall_check_digit_index, '1');\n  const name = formatDG1Attribute(\n    name_index,\n    formatName(idDocInput.firstName, idDocInput.lastName, name_index[1] - name_index[0] + 1)\n  );\n\n  const dg1 = `${doc_type}${issuing_state}${document_number}${document_number_check_digit}${optional_data}${date_of_birth}${date_of_birth_check_digit}${sex}${expiration_date}${expiration_date_check_digit}${nationality}${optional_data_2}${overall_check_digit}${name}`;\n  if (dg1.length !== 90) {\n    throw new Error(`DG1 length is not 90: ${dg1.length}`);\n  }\n  return dg1;\n}\n\nfunction genDG1Passport(idDocInput: IdDocInput) {\n  const doc_type_index = [0, 1];\n  const issuing_state_index = [2, 4];\n  const name_index = [5, 43];\n  const document_number_index = [44, 52];\n  const document_number_check_digit_index = [53, 53];\n  const nationality_index = [54, 56];\n  const date_of_birth_index = [57, 62];\n  const date_of_birth_check_digit_index = [63, 63];\n  const sex_index = [64, 64];\n  const expiration_date_index = [65, 70];\n  const expiration_date_check_digit_index = [71, 71];\n  const optional_data_index = [72, 85];\n  const optional_data_check_digit_index = [86, 86];\n  const overall_check_digit_index = [87, 87];\n\n  const doc_type = formatDG1Attribute(doc_type_index, 'P');\n  const issuing_state = formatDG1Attribute(issuing_state_index, idDocInput.nationality);\n  const name = formatDG1Attribute(\n    name_index,\n    formatName(idDocInput.firstName, idDocInput.lastName, name_index[1] - name_index[0] + 1)\n  );\n  const document_number = formatDG1Attribute(document_number_index, idDocInput.passportNumber);\n  const document_number_check_digit = formatDG1Attribute(document_number_check_digit_index, '4');\n  const nationality = formatDG1Attribute(nationality_index, idDocInput.nationality);\n  const date_of_birth = formatDG1Attribute(date_of_birth_index, idDocInput.birthDate);\n  const date_of_birth_check_digit = formatDG1Attribute(date_of_birth_check_digit_index, '1');\n  const sex = formatDG1Attribute(sex_index, idDocInput.sex);\n  const expiration_date = formatDG1Attribute(expiration_date_index, idDocInput.expiryDate);\n  const expiration_date_check_digit = formatDG1Attribute(expiration_date_check_digit_index, '5');\n  const optional_data = formatDG1Attribute(optional_data_index, '');\n  const optional_data_check_digit = formatDG1Attribute(optional_data_check_digit_index, '<');\n  const overall_check_digit = formatDG1Attribute(overall_check_digit_index, '2');\n\n  const dg1 = `${doc_type}${issuing_state}${name}${document_number}${document_number_check_digit}${nationality}${date_of_birth}${date_of_birth_check_digit}${sex}${expiration_date}${expiration_date_check_digit}${optional_data}${optional_data_check_digit}${overall_check_digit}`;\n  if (dg1.length !== 88) {\n    throw new Error(`DG1 length is not 88: ${dg1.length}`);\n  }\n  return dg1;\n}\n","import { toUnsignedByte } from '../bytes.js';\n\nexport function formatAndConcatenateDataHashes(\n  dataHashes: [number, number[]][],\n  dg1HashOffset: number\n) {\n  // concatenating dataHashes :\n  const concat: number[] = [];\n\n  const startingSequence = Array.from(\n    { length: dg1HashOffset },\n    () => Math.floor(Math.random() * 256) - 128\n  );\n\n  // // sha256 with rsa (index of mrzhash is 31)\n  // const startingSequence = [\n  //   // SEQUENCE + long form indicator + length (293 bytes)\n  //   48, -126, 1, 37,\n  //   // length: 1 byte\n  //   2, 1,\n  //   // LDSSecurityObjectVersion v0\n  //   0,\n  //   // padding: size 11 - size 9...\n  //   48, 11, 6, 9,\n  //   // 2.16.840.1.101.3.4.2.1 is sha256\n  //   96, -122, 72, 1, 101, 3, 4, 2, 1,\n  //   // SEQUENCE + long form indicator + length (273 bytes)\n  //   48, -126, 1, 17,\n  // ]\n\n  // rsassaPss (index of mrzhash is 30)\n  // // SEQUENCE + short form indicator + length (137 bytes)\n  // 48, -127, -119,\n  // 2, 1,\n  // 0,\n  // 48, 13, 6, 9,\n  // // 2.16.840.1.101.3.4.2.1 is sha256\n  // 96, -122, 72, 1, 101, 3, 4, 2, 1,\n  // // NULL tag + SEQUENCE + length (117 bytes)\n  // 5, 0, 48, 117,\n\n  // SHA384withECDSA (index of mrzhash is 33)\n  // // SEQUENCE + long form indicator + length (313 bytes)\n  // 48, -126, 1, 57,\n  // 2, 1,\n  // 1,\n  // 48, 13, 6, 9,\n  // // 2.16.840.1.101.3.4.2.1 is sha384\n  // 96, -122, 72, 1, 101, 3, 4, 2, 2,\n  // // NULL tag + SEQUENCE + long form indicator + length (275 bytes)\n  // 5, 0, 48, -126, 1, 19,\n\n  // spain\n  // 48, -127,  -79,\n  // 2,    1,\n  // 0,\n  // 48,    7,   6,   5,\n  // 1.3.14.3.2.26 is sha1\n  // 43,  14, 3,    2,   26,\n  // SEQUENCE + ...\n  // 48, -127, -94,\n\n  // => current conclusion is we should be able to just hardcode indexes\n  // => as they shouldn't change must for same sig alg.\n  // => wrong: our rsassaPss has less datagroups so the length is different (30 rather then 31)\n\n  // console.log(`startingSequence`, startingSequence.map(byte => (byte < 0 ? byte + 256 : byte).toString(16).padStart(2, '0')).join(''));\n\n  concat.push(...startingSequence);\n\n  for (const dataHash of dataHashes) {\n    // console.log(`dataHash ${dataHash[0]}`, dataHash[1].map(byte => (byte < 0 ? byte + 256 : byte).toString(16).padStart(2, '0')).join(''));\n\n    //push 7 padding bytes\n    concat.push(...[0, 0, 0, 0, 0, 0, 0]);\n\n    concat.push(...dataHash[1]);\n    // concat.push(...[48, hashLen + 5, 2, 1, dataHash[0], 4, hashLen, ...dataHash[1]])\n    // 48, 37, 2, 1, 1, 4, 32,\n    // 48, 53, 2, 1, 1, 4, 48,\n  }\n\n  return concat;\n}\n\nexport function formatDG1Attribute(index: number[], value: string) {\n  const max_length = index[1] - index[0] + 1;\n  if (value.length > max_length) {\n    throw new Error(\n      `Value is too long for index ${index[0]}-${index[1]} value: ${value} value.length: ${value.length} maxLength: ${max_length}`\n    );\n  }\n  return value.padEnd(max_length, '<');\n}\n\nexport function formatDg2Hash(dg2Hash: number[]) {\n  const unsignedBytesDg2Hash = dg2Hash.map((x) => toUnsignedByte(x));\n  while (unsignedBytesDg2Hash.length < 64) {\n    // pad it to 64 bytes to correspond to the hash length of sha512 and avoid multiplying circuits\n    unsignedBytesDg2Hash.push(0);\n  }\n  return unsignedBytesDg2Hash;\n}\n\nexport function formatMrz(mrz: string) {\n  const mrzCharcodes = [...mrz].map((char) => char.charCodeAt(0));\n\n  if (mrz.length === 88) {\n    mrzCharcodes.unshift(88); // the length of the mrz data\n    mrzCharcodes.unshift(95, 31); // the MRZ_INFO_TAG\n    mrzCharcodes.unshift(91); // the new length of the whole array\n    mrzCharcodes.unshift(97); // the tag for DG1\n  } else if (mrz.length === 90) {\n    mrzCharcodes.unshift(90); // the length of the mrz data\n    mrzCharcodes.unshift(95, 31); // the MRZ_INFO_TAG\n    mrzCharcodes.unshift(93); // the new length of the whole array\n    mrzCharcodes.unshift(97); // the tag for DG1\n  } else {\n    throw new Error(`Unsupported MRZ length: ${mrz.length}. Expected 88 or 90 characters.`);\n  }\n\n  return mrzCharcodes;\n}\n\nexport function formatName(firstName: string, lastName: string, targetLength: number) {\n  // Split names by spaces and join parts with '<'\n  const formattedLastName = lastName.toUpperCase().split(' ').join('<');\n  const formattedFirstName = firstName.toUpperCase().split(' ').join('<');\n\n  // Combine with '<<' separator\n  let result = `${formattedLastName}<<${formattedFirstName}`;\n\n  // Pad with '<' or truncate to target length\n  if (result.length < targetLength) {\n    result = result.padEnd(targetLength, '<');\n  } else if (result.length > targetLength) {\n    result = result.substring(0, targetLength);\n  }\n\n  return result;\n}\n\nexport function generateSignedAttr(messageDigest: number[]) {\n  const constructedEContent = [];\n\n  // Detailed description is in private file r&d.ts for now\n  // First, the tag and length, assumed to be always the same\n  constructedEContent.push(...[49, 102]);\n\n  // 1.2.840.113549.1.9.3 is RFC_3369_CONTENT_TYPE_OID\n  constructedEContent.push(...[48, 21, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 3]);\n  // 2.23.136.1.1.1 is ldsSecurityObject\n  constructedEContent.push(...[49, 8, 6, 6, 103, -127, 8, 1, 1, 1]);\n\n  // 1.2.840.113549.1.9.5 is signing-time\n  constructedEContent.push(...[48, 28, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 5]);\n  // mock time of signature\n  constructedEContent.push(...[49, 15, 23, 13, 49, 57, 49, 50, 49, 54, 49, 55, 50, 50, 51, 56, 90]);\n  // 1.2.840.113549.1.9.4 is RFC_3369_MESSAGE_DIGEST_OID\n  constructedEContent.push(...[48, 47, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 4]);\n  // TAG and length of the message digest\n  constructedEContent.push(...[49, 34, 4, 32]);\n\n  constructedEContent.push(...messageDigest);\n  return constructedEContent;\n}\n"],"mappings":"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","names":[]}