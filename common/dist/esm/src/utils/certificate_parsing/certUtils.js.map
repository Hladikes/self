{"version":3,"sources":["../../../../../src/utils/certificate_parsing/utils.ts"],"sourcesContent":["import * as asn1js from 'asn1js';\nimport { sha256 } from 'js-sha256';\nimport type { Certificate } from 'pkijs';\n\nexport const getAuthorityKeyIdentifier = (cert: Certificate): string => {\n  const authorityKeyIdentifierExt = cert.extensions.find((ext) => ext.extnID === '2.5.29.35');\n  if (authorityKeyIdentifierExt) {\n    const extnValueHex = authorityKeyIdentifierExt.extnValue.valueBlock.valueHexView;\n    const asn1 = asn1js.fromBER(extnValueHex);\n    if (asn1.offset !== -1) {\n      const constructedValue = asn1.result.valueBlock as { value: Array<any> };\n      if (constructedValue.value) {\n        const keyIdentifierElement = constructedValue.value.find(\n          (element) => element.idBlock.tagClass === 3 && element.idBlock.tagNumber === 0\n        );\n        if (keyIdentifierElement) {\n          return Buffer.from(keyIdentifierElement.valueBlock.valueHexView).toString('hex');\n        }\n      }\n    }\n  } else {\n    console.log('\\x1b[31m%s\\x1b[0m', 'no authority key identifier found');\n  }\n  return '';\n};\n\nexport function getIssuerCountryCode(cert: Certificate): string {\n  const issuerRDN = cert.issuer.typesAndValues;\n  let issuerCountryCode = '';\n  for (const rdn of issuerRDN) {\n    if (rdn.type === '2.5.4.6') {\n      // OID for Country Name\n      issuerCountryCode = rdn.value.valueBlock.value;\n      break;\n    }\n  }\n  return issuerCountryCode.toUpperCase();\n}\n\nexport const getSubjectKeyIdentifier = (cert: Certificate): string => {\n  const subjectKeyIdentifier = cert.extensions.find((ext) => ext.extnID === '2.5.29.14');\n  if (subjectKeyIdentifier) {\n    let skiValue = Buffer.from(subjectKeyIdentifier.extnValue.valueBlock.valueHexView).toString(\n      'hex'\n    );\n\n    skiValue = skiValue.replace(/^(?:30(?:16|1E|22|32|42))?(?:04(?:08|14|1C|20|30|40))?/, '');\n    return skiValue;\n  } else {\n    // console.log('\\x1b[31m%s\\x1b[0m', 'no subject key identifier found'); // it's no big deal if this is not found\n    // do a sha1 of the certificate tbs\n    const hash = sha256.create();\n    hash.update(cert.tbsView);\n    return hash.hex();\n  }\n};\n"],"mappings":";AAAA,YAAY,YAAY;AACxB,SAAS,cAAc;AAGhB,IAAM,4BAA4B,CAAC,SAA8B;AACtE,QAAM,4BAA4B,KAAK,WAAW,KAAK,CAAC,QAAQ,IAAI,WAAW,WAAW;AAC1F,MAAI,2BAA2B;AAC7B,UAAM,eAAe,0BAA0B,UAAU,WAAW;AACpE,UAAM,OAAc,eAAQ,YAAY;AACxC,QAAI,KAAK,WAAW,IAAI;AACtB,YAAM,mBAAmB,KAAK,OAAO;AACrC,UAAI,iBAAiB,OAAO;AAC1B,cAAM,uBAAuB,iBAAiB,MAAM;AAAA,UAClD,CAAC,YAAY,QAAQ,QAAQ,aAAa,KAAK,QAAQ,QAAQ,cAAc;AAAA,QAC/E;AACA,YAAI,sBAAsB;AACxB,iBAAO,OAAO,KAAK,qBAAqB,WAAW,YAAY,EAAE,SAAS,KAAK;AAAA,QACjF;AAAA,MACF;AAAA,IACF;AAAA,EACF,OAAO;AACL,YAAQ,IAAI,qBAAqB,mCAAmC;AAAA,EACtE;AACA,SAAO;AACT;AAEO,SAAS,qBAAqB,MAA2B;AAC9D,QAAM,YAAY,KAAK,OAAO;AAC9B,MAAI,oBAAoB;AACxB,aAAW,OAAO,WAAW;AAC3B,QAAI,IAAI,SAAS,WAAW;AAE1B,0BAAoB,IAAI,MAAM,WAAW;AACzC;AAAA,IACF;AAAA,EACF;AACA,SAAO,kBAAkB,YAAY;AACvC;AAEO,IAAM,0BAA0B,CAAC,SAA8B;AACpE,QAAM,uBAAuB,KAAK,WAAW,KAAK,CAAC,QAAQ,IAAI,WAAW,WAAW;AACrF,MAAI,sBAAsB;AACxB,QAAI,WAAW,OAAO,KAAK,qBAAqB,UAAU,WAAW,YAAY,EAAE;AAAA,MACjF;AAAA,IACF;AAEA,eAAW,SAAS,QAAQ,0DAA0D,EAAE;AACxF,WAAO;AAAA,EACT,OAAO;AAGL,UAAM,OAAO,OAAO,OAAO;AAC3B,SAAK,OAAO,KAAK,OAAO;AACxB,WAAO,KAAK,IAAI;AAAA,EAClB;AACF;","names":[]}