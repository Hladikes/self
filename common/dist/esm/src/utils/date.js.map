{"version":3,"sources":["../../../../src/utils/date.ts"],"sourcesContent":["export function getAdjustedTimestampBytes(y: number = 0, m: number = 0, d: number = 0): number[] {\n  // Get the current date/time\n  const currentDate: Date = new Date();\n\n  // Optionally adjust the date\n  if (y !== 0) currentDate.setFullYear(currentDate.getFullYear() + y);\n  if (m !== 0) currentDate.setMonth(currentDate.getMonth() + m);\n  if (d !== 0) currentDate.setDate(currentDate.getDate() + d);\n\n  // Get the Unix timestamp (in seconds)\n  const timestamp: number = Math.floor(currentDate.getTime() / 1000);\n\n  // Convert the timestamp to 4 bytes\n  const bytes: number[] = [\n    (timestamp >> 24) & 0xff,\n    (timestamp >> 16) & 0xff,\n    (timestamp >> 8) & 0xff,\n    timestamp & 0xff,\n  ];\n\n  return bytes;\n}\nexport function getCurrentDateYYMMDD(dayDiff: number = 0): number[] {\n  const date = new Date();\n  date.setDate(date.getDate() + dayDiff); // Adjust the date by the dayDiff\n  const year = date.getUTCFullYear();\n  const month = date.getUTCMonth() + 1;\n  const day = date.getUTCDate();\n  const YY = `0${year % 100}`.slice(-2);\n  const MM = `0${month}`.slice(-2);\n  const DD = `0${day}`.slice(-2);\n\n  const yymmdd = `${YY}${MM}${DD}`;\n  return Array.from(yymmdd).map((char) => parseInt(char));\n}\n\nexport function getTimestampBytesFromYearFraction(yearFraction: number): number[] {\n  // Separate the year and the fractional part\n  const year = Math.floor(yearFraction);\n  const fraction = yearFraction - year;\n\n  // Convert the fractional part into months (0-11)\n  const monthsFromFraction = Math.floor(fraction * 12);\n\n  // Create a date object from the year and the calculated month\n  // Assuming the first day of the month for simplicity\n  const date = new Date(year, monthsFromFraction, 1);\n\n  // Get the Unix timestamp (in seconds)\n  const timestamp: number = Math.floor(date.getTime() / 1000);\n\n  // Convert the timestamp to 4 bytes\n  const bytes: number[] = [\n    (timestamp >> 24) & 0xff,\n    (timestamp >> 16) & 0xff,\n    (timestamp >> 8) & 0xff,\n    timestamp & 0xff,\n  ];\n\n  return bytes;\n}\n\nexport function unixTimestampToYYMMDD(timestamp: number): string {\n  console.log('timestamp: ' + timestamp);\n  const date = new Date(timestamp * 1000);\n  console.log('date: ' + date);\n  const year = date.getUTCFullYear();\n  console.log('year: ' + year);\n  const month = date.getUTCMonth() + 1;\n  const day = date.getUTCDate();\n\n  // Ensure the year is correctly formatted as two digits\n  const YY = `0${year % 100}`.slice(-2);\n  const MM = `0${month}`.slice(-2);\n  const DD = `0${day}`.slice(-2);\n\n  return `${YY}${MM}${DD}`;\n}\n\nexport function yearFractionToYYMMDD(yearFraction: number): string {\n  // Separate the year and the fractional part\n  const year = yearFraction;\n  const fraction = yearFraction - Math.floor(yearFraction);\n\n  // Convert the fractional part into months (0-11)\n  const monthsFromFraction = Math.floor(fraction * 12);\n\n  // Assuming the first day of the month for simplicity\n  const day = 1;\n\n  // Format year, month, and day into YYMMDD string\n  const YY = `0${Math.floor(year) % 100}`.slice(-2);\n  const MM = `0${monthsFromFraction + 1}`.slice(-2); // +1 because months are 1-indexed in this format\n  const DD = `0${day}`.slice(-2);\n\n  return `${YY}${MM}${DD}`;\n}\n\nexport function yymmddToByteArray(yymmdd: string): number[] {\n  // Convert each character in the string to its ASCII value\n  const byteArray = Array.from(yymmdd).map((char) => char.charCodeAt(0));\n  return byteArray;\n}\n"],"mappings":";AAAO,SAAS,0BAA0B,IAAY,GAAG,IAAY,GAAG,IAAY,GAAa;AAE/F,QAAM,cAAoB,oBAAI,KAAK;AAGnC,MAAI,MAAM,EAAG,aAAY,YAAY,YAAY,YAAY,IAAI,CAAC;AAClE,MAAI,MAAM,EAAG,aAAY,SAAS,YAAY,SAAS,IAAI,CAAC;AAC5D,MAAI,MAAM,EAAG,aAAY,QAAQ,YAAY,QAAQ,IAAI,CAAC;AAG1D,QAAM,YAAoB,KAAK,MAAM,YAAY,QAAQ,IAAI,GAAI;AAGjE,QAAM,QAAkB;AAAA,IACrB,aAAa,KAAM;AAAA,IACnB,aAAa,KAAM;AAAA,IACnB,aAAa,IAAK;AAAA,IACnB,YAAY;AAAA,EACd;AAEA,SAAO;AACT;AACO,SAAS,qBAAqB,UAAkB,GAAa;AAClE,QAAM,OAAO,oBAAI,KAAK;AACtB,OAAK,QAAQ,KAAK,QAAQ,IAAI,OAAO;AACrC,QAAM,OAAO,KAAK,eAAe;AACjC,QAAM,QAAQ,KAAK,YAAY,IAAI;AACnC,QAAM,MAAM,KAAK,WAAW;AAC5B,QAAM,KAAK,IAAI,OAAO,GAAG,GAAG,MAAM,EAAE;AACpC,QAAM,KAAK,IAAI,KAAK,GAAG,MAAM,EAAE;AAC/B,QAAM,KAAK,IAAI,GAAG,GAAG,MAAM,EAAE;AAE7B,QAAM,SAAS,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AAC9B,SAAO,MAAM,KAAK,MAAM,EAAE,IAAI,CAAC,SAAS,SAAS,IAAI,CAAC;AACxD;AAEO,SAAS,kCAAkC,cAAgC;AAEhF,QAAM,OAAO,KAAK,MAAM,YAAY;AACpC,QAAM,WAAW,eAAe;AAGhC,QAAM,qBAAqB,KAAK,MAAM,WAAW,EAAE;AAInD,QAAM,OAAO,IAAI,KAAK,MAAM,oBAAoB,CAAC;AAGjD,QAAM,YAAoB,KAAK,MAAM,KAAK,QAAQ,IAAI,GAAI;AAG1D,QAAM,QAAkB;AAAA,IACrB,aAAa,KAAM;AAAA,IACnB,aAAa,KAAM;AAAA,IACnB,aAAa,IAAK;AAAA,IACnB,YAAY;AAAA,EACd;AAEA,SAAO;AACT;AAEO,SAAS,sBAAsB,WAA2B;AAC/D,UAAQ,IAAI,gBAAgB,SAAS;AACrC,QAAM,OAAO,IAAI,KAAK,YAAY,GAAI;AACtC,UAAQ,IAAI,WAAW,IAAI;AAC3B,QAAM,OAAO,KAAK,eAAe;AACjC,UAAQ,IAAI,WAAW,IAAI;AAC3B,QAAM,QAAQ,KAAK,YAAY,IAAI;AACnC,QAAM,MAAM,KAAK,WAAW;AAG5B,QAAM,KAAK,IAAI,OAAO,GAAG,GAAG,MAAM,EAAE;AACpC,QAAM,KAAK,IAAI,KAAK,GAAG,MAAM,EAAE;AAC/B,QAAM,KAAK,IAAI,GAAG,GAAG,MAAM,EAAE;AAE7B,SAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACxB;AAEO,SAAS,qBAAqB,cAA8B;AAEjE,QAAM,OAAO;AACb,QAAM,WAAW,eAAe,KAAK,MAAM,YAAY;AAGvD,QAAM,qBAAqB,KAAK,MAAM,WAAW,EAAE;AAGnD,QAAM,MAAM;AAGZ,QAAM,KAAK,IAAI,KAAK,MAAM,IAAI,IAAI,GAAG,GAAG,MAAM,EAAE;AAChD,QAAM,KAAK,IAAI,qBAAqB,CAAC,GAAG,MAAM,EAAE;AAChD,QAAM,KAAK,IAAI,GAAG,GAAG,MAAM,EAAE;AAE7B,SAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACxB;AAEO,SAAS,kBAAkB,QAA0B;AAE1D,QAAM,YAAY,MAAM,KAAK,MAAM,EAAE,IAAI,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC;AACrE,SAAO;AACT;","names":[]}