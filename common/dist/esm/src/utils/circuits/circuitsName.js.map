{"version":3,"sources":["../../../../../src/utils/circuits/circuitsName.ts"],"sourcesContent":["import type { PassportData } from '../types.js';\n\nexport function getCircuitNameFromPassportData(\n  passportData: PassportData,\n  circuitType: 'register' | 'dsc'\n) {\n  if (circuitType === 'register') {\n    return getRegisterNameFromPassportData(passportData);\n  } else {\n    return getDSCircuitNameFromPassportData(passportData);\n  }\n}\n\nfunction getDSCircuitNameFromPassportData(passportData: PassportData) {\n  console.log('Getting DSC circuit name from passport data...');\n\n  if (!passportData.passportMetadata) {\n    console.error('Passport metadata is missing');\n    throw new Error('Passport data are not parsed');\n  }\n  const passportMetadata = passportData.passportMetadata;\n\n  if (!passportMetadata.cscaFound) {\n    console.error('CSCA not found in passport metadata');\n    throw new Error('CSCA not found');\n  }\n\n  const signatureAlgorithm = passportMetadata.cscaSignatureAlgorithm;\n  const hashFunction = passportMetadata.cscaHashFunction;\n\n  console.log('CSCA Signature Algorithm:', signatureAlgorithm);\n  console.log('CSCA Hash Function:', hashFunction);\n\n  if (signatureAlgorithm === 'ecdsa') {\n    console.log('Processing ECDSA signature...');\n    const curve = passportMetadata.cscaCurveOrExponent;\n    console.log('ECDSA curve:', curve);\n    const circuitName = `dsc_${hashFunction}_${signatureAlgorithm}_${curve}`;\n    console.log('Generated circuit name:', circuitName);\n    return circuitName;\n  } else if (signatureAlgorithm === 'rsa') {\n    console.log('Processing RSA signature...');\n    const exponent = passportMetadata.cscaCurveOrExponent;\n    const bits = passportMetadata.cscaSignatureAlgorithmBits;\n    console.log('RSA exponent:', exponent);\n    console.log('RSA bits:', bits);\n\n    if (bits <= 4096) {\n      const circuitName = `dsc_${hashFunction}_${signatureAlgorithm}_${exponent}_${4096}`;\n      console.log('Generated circuit name:', circuitName);\n      return circuitName;\n    } else {\n      console.error('RSA key length exceeds maximum supported length');\n      throw new Error(`Unsupported key length: ${bits}`);\n    }\n  } else if (signatureAlgorithm === 'rsapss') {\n    console.log('Processing RSA-PSS signature...');\n    const exponent = passportMetadata.cscaCurveOrExponent;\n    const saltLength = passportMetadata.cscaSaltLength;\n    const bits = passportMetadata.cscaSignatureAlgorithmBits;\n    console.log('RSA-PSS exponent:', exponent);\n    console.log('RSA-PSS salt length:', saltLength);\n    console.log('RSA-PSS bits:', bits);\n\n    if (bits <= 4096) {\n      const circuitName = `dsc_${hashFunction}_${signatureAlgorithm}_${exponent}_${saltLength}_${bits}`;\n      console.log('Generated circuit name:', circuitName);\n      return circuitName;\n    } else {\n      console.error('RSA-PSS key length exceeds maximum supported length');\n      throw new Error(`Unsupported key length: ${bits}`);\n    }\n  } else {\n    console.error('Unsupported signature algorithm:', signatureAlgorithm);\n    throw new Error('Unsupported signature algorithm');\n  }\n}\n\nfunction getRegisterNameFromPassportData(passportData: PassportData) {\n  console.log('Getting register circuit name from passport data...');\n\n  if (!passportData.passportMetadata) {\n    console.error('Passport metadata is missing');\n    throw new Error('Passport data are not parsed');\n  }\n  const passportMetadata = passportData.passportMetadata;\n\n  if (!passportMetadata.cscaFound) {\n    console.error('CSCA not found in passport metadata');\n    throw new Error('CSCA not found');\n  }\n\n  const dgHashAlgo = passportMetadata.dg1HashFunction;\n  const eContentHashAlgo = passportMetadata.eContentHashFunction;\n  const signedAttrHashAlgo = passportMetadata.signedAttrHashFunction;\n  const sigAlg = passportMetadata.signatureAlgorithm;\n\n  console.log('DG Hash Algorithm:', dgHashAlgo);\n  console.log('eContent Hash Algorithm:', eContentHashAlgo);\n  console.log('Signed Attributes Hash Algorithm:', signedAttrHashAlgo);\n  console.log('Signature Algorithm:', sigAlg);\n  const prefix =\n    passportData.documentType === 'id_card' || passportData.documentType === 'mock_id_card'\n      ? 'register_id'\n      : 'register';\n\n  if (sigAlg === 'ecdsa') {\n    console.log('Processing ECDSA signature...');\n    const { curveOrExponent } = passportMetadata;\n    console.log('ECDSA curve:', curveOrExponent);\n    const circuitName = `${prefix}_${dgHashAlgo}_${eContentHashAlgo}_${signedAttrHashAlgo}_${sigAlg}_${curveOrExponent}`;\n    console.log('Generated circuit name:', circuitName);\n    return circuitName;\n  } else if (sigAlg === 'rsa') {\n    console.log('Processing RSA signature...');\n    const { curveOrExponent, signatureAlgorithmBits } = passportMetadata;\n    console.log('RSA exponent:', curveOrExponent);\n    console.log('RSA bits:', signatureAlgorithmBits);\n\n    if (signatureAlgorithmBits <= 4096) {\n      const circuitName = `${prefix}_${dgHashAlgo}_${eContentHashAlgo}_${signedAttrHashAlgo}_${sigAlg}_${curveOrExponent}_${4096}`;\n      console.log('Generated circuit name:', circuitName);\n      return circuitName;\n    } else {\n      console.error('RSA key length exceeds maximum supported length');\n      throw new Error(`Unsupported key length: ${signatureAlgorithmBits}`);\n    }\n  } else if (sigAlg === 'rsapss') {\n    console.log('Processing RSA-PSS signature...');\n    const { curveOrExponent, saltLength, signatureAlgorithmBits } = passportMetadata;\n    console.log('RSA-PSS exponent:', curveOrExponent);\n    console.log('RSA-PSS salt length:', saltLength);\n    console.log('RSA-PSS bits:', signatureAlgorithmBits);\n\n    if (signatureAlgorithmBits <= 4096) {\n      const circuitName = `${prefix}_${dgHashAlgo}_${eContentHashAlgo}_${signedAttrHashAlgo}_${sigAlg}_${curveOrExponent}_${saltLength}_${signatureAlgorithmBits}`;\n      console.log('Generated circuit name:', circuitName);\n      return circuitName;\n    } else {\n      console.error('RSA-PSS key length exceeds maximum supported length');\n      throw new Error(`Unsupported key length: ${signatureAlgorithmBits}`);\n    }\n  } else {\n    console.error('Unsupported signature algorithm:', sigAlg);\n    throw new Error('Unsupported signature algorithm');\n  }\n}\n"],"mappings":"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","names":[]}